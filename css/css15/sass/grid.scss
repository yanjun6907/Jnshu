$colum: 12;
$gutter: 30px;
@mixin justify($to) {
    justify-content: $to;
}
@mixin flex {
    display: flex;
    flex-wrap: wrap;
}
@mixin clearfix {
    content: "";/* float会引起父元素的高度塌陷，所以要使用一些clearfix技巧来清除浮动 */
    display: table;
    clear: both;
}
@mixin gener($si) {
    @if $si==null {
        @for $var from 1 to $colum {
            .col-#{$var} {
                width: $var/$colum*100%;
            }
        }
   }
    @else {
        @for $var from 1 to $colum {
            .col-#{$si}-#{$var} {
                width: $var/$colum*100%;
            }
        }
    }
}
/* 容器样式设置 */  
.container, .container-fluid {
    width: 90%;
    padding: 0 $gutter/2;/* 设置padding是为了后面Column直接嵌套Row预留 */
    margin: auto;
}
.container *,.container-fluid * {
    box-sizing: border-box;  
}
.row {
    @include flex;
    margin-left: -$gutter/2;  /* Container设置了padding，所以Row需要设置-margin让Row占满Container的宽度 */
    margin-right: -$gutter/2;
} 
.row:after { 
    @include clearfix;
}       
[class*='col-'] {
    width: 100%;
    padding:0 $gutter/2; 
}
/* 小屏幕 平板等 屏幕宽度大于等于0px */
@media (min-width: 0px) {
    @include gener(null);
}
/* 小屏幕 平板等 屏幕宽度大于等于576px */
@media (min-width: 576px) {
    @include gener(sm);
}
/* 中等屏幕 桌面显示器等 屏幕宽度大于等于768px */
@media (min-width: 768px) {
    @include gener(md);
}
/* 大屏幕 大桌面显示器等 屏幕宽度大于等于992px */ 
@media (min-width: 992px) {
    @include gener(lg);
}
  
.justify-content-between {
    @include justify(space-between);
}
.justify-content-center {
    @include justify(center);
}
.justify-content-around {
    @include justify(space-around);
}
.justify-content-end {
    @include justify(flex-end);
} 
